# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protocol import protocol_pb2 as protocol_dot_protocol__pb2


class SchedulerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.checkin = channel.unary_unary(
                '/scheduler.Scheduler/checkin',
                request_serializer=protocol_dot_protocol__pb2.CheckinReq.SerializeToString,
                response_deserializer=protocol_dot_protocol__pb2.CheckinReply.FromString,
                )
        self.execute = channel.unary_unary(
                '/scheduler.Scheduler/execute',
                request_serializer=protocol_dot_protocol__pb2.ExecuteReq.SerializeToString,
                response_deserializer=protocol_dot_protocol__pb2.ExecuteReply.FromString,
                )
        self.get_resources = channel.unary_unary(
                '/scheduler.Scheduler/get_resources',
                request_serializer=protocol_dot_protocol__pb2.GetResourcesReq.SerializeToString,
                response_deserializer=protocol_dot_protocol__pb2.GetResourcesReply.FromString,
                )
        self.get_finished = channel.unary_unary(
                '/scheduler.Scheduler/get_finished',
                request_serializer=protocol_dot_protocol__pb2.GetFinishedReq.SerializeToString,
                response_deserializer=protocol_dot_protocol__pb2.GetFinishedReply.FromString,
                )
        self.shutdown = channel.unary_unary(
                '/scheduler.Scheduler/shutdown',
                request_serializer=protocol_dot_protocol__pb2.ShutdownReq.SerializeToString,
                response_deserializer=protocol_dot_protocol__pb2.ShutdownReply.FromString,
                )
        self.get_samples = channel.unary_unary(
                '/scheduler.Scheduler/get_samples',
                request_serializer=protocol_dot_protocol__pb2.GetSamplesReq.SerializeToString,
                response_deserializer=protocol_dot_protocol__pb2.GetSamplesReply.FromString,
                )


class SchedulerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def checkin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def execute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_resources(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_finished(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def shutdown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_samples(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchedulerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'checkin': grpc.unary_unary_rpc_method_handler(
                    servicer.checkin,
                    request_deserializer=protocol_dot_protocol__pb2.CheckinReq.FromString,
                    response_serializer=protocol_dot_protocol__pb2.CheckinReply.SerializeToString,
            ),
            'execute': grpc.unary_unary_rpc_method_handler(
                    servicer.execute,
                    request_deserializer=protocol_dot_protocol__pb2.ExecuteReq.FromString,
                    response_serializer=protocol_dot_protocol__pb2.ExecuteReply.SerializeToString,
            ),
            'get_resources': grpc.unary_unary_rpc_method_handler(
                    servicer.get_resources,
                    request_deserializer=protocol_dot_protocol__pb2.GetResourcesReq.FromString,
                    response_serializer=protocol_dot_protocol__pb2.GetResourcesReply.SerializeToString,
            ),
            'get_finished': grpc.unary_unary_rpc_method_handler(
                    servicer.get_finished,
                    request_deserializer=protocol_dot_protocol__pb2.GetFinishedReq.FromString,
                    response_serializer=protocol_dot_protocol__pb2.GetFinishedReply.SerializeToString,
            ),
            'shutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.shutdown,
                    request_deserializer=protocol_dot_protocol__pb2.ShutdownReq.FromString,
                    response_serializer=protocol_dot_protocol__pb2.ShutdownReply.SerializeToString,
            ),
            'get_samples': grpc.unary_unary_rpc_method_handler(
                    servicer.get_samples,
                    request_deserializer=protocol_dot_protocol__pb2.GetSamplesReq.FromString,
                    response_serializer=protocol_dot_protocol__pb2.GetSamplesReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scheduler.Scheduler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Scheduler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def checkin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/checkin',
            protocol_dot_protocol__pb2.CheckinReq.SerializeToString,
            protocol_dot_protocol__pb2.CheckinReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/execute',
            protocol_dot_protocol__pb2.ExecuteReq.SerializeToString,
            protocol_dot_protocol__pb2.ExecuteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_resources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/get_resources',
            protocol_dot_protocol__pb2.GetResourcesReq.SerializeToString,
            protocol_dot_protocol__pb2.GetResourcesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_finished(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/get_finished',
            protocol_dot_protocol__pb2.GetFinishedReq.SerializeToString,
            protocol_dot_protocol__pb2.GetFinishedReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def shutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/shutdown',
            protocol_dot_protocol__pb2.ShutdownReq.SerializeToString,
            protocol_dot_protocol__pb2.ShutdownReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_samples(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/get_samples',
            protocol_dot_protocol__pb2.GetSamplesReq.SerializeToString,
            protocol_dot_protocol__pb2.GetSamplesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
